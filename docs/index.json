[
{
	"uri": "/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " NuKeeper Basics See how to install NuKeeper and how to configure it for your purposes.\n"
},
{
	"uri": "/commands/inspect/",
	"title": "Inspect",
	"tags": [],
	"description": "",
	"content": "Use the inspect command to show updates that can be applied to a solution.\nInspect the current folder:\ncd C:\\code\\MyApp nukeeper inspect  This produces output e.g.\nFound 2 package updates Microsoft.Extensions.Configuration.Json to 2.1.0 from 2.0.2 in 1 place since 13 days ago. Swashbuckle.AspNetCore to 2.5.0 from 2.4.0 in 1 place since 6 days ago.  You can inspect a different folder:\nnukeeper inspect C:\\code\\MyApp  "
},
{
	"uri": "/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " You will first need .NET Core 2.1 or later installed.\nNuKeeper can be found on NuGet as a global tool. The source is on GitHub.\nInstall NuKeeper with:\ndotnet tool install nukeeper --global  Update NuKeeper with:\ndotnet tool update nukeeper --global  Using NuKeeper Running nukeeper with no arguments shows the help.\nnukeeper --help  Help on a NuKeeper command\nnukeeper repo --help  "
},
{
	"uri": "/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": " NuKeeper Commands    Name Type Intention     inspect local inspect outdated packages   update local updates outdated packages   repo remote find outdated packages and updates it with a PR to your platform   organisation remote find outdated packages and updates it with a PR to your platform for the whole organisation.   global remote find outdated packages and updates it with a PR to your platform for all your repositories.    The organisation and the global command are only available for github, because the other platforms don\u0026rsquo;t allow such a powerfull token.\n\r"
},
{
	"uri": "/commands/update/",
	"title": "Update",
	"tags": [],
	"description": "",
	"content": " Use the update command to apply an update to code.\nApply a update chosen by NuKeeper to a solution:\ncd C:\\code\\MyApp nukeeper update  or\nnukeeper update C:\\code\\MyApp  Apply up to ten package updates in a run:\nnukeeper update C:\\code\\MyApp --maxpackageupdates 10  Apply an update to a particular package:\nnukeeper update C:\\code\\MyApp --include SomePackageThatIWant  Exclude updates to a particular package:\nnukeeper update C:\\code\\MyApp --exclude SomePackageThatIDoNotWant  Apply updates to all packages of the AWS SDK, a set of closely-related packages with names that all start with AWSSDK.:\nnukeeper update C:\\code\\MyApp --include ^AWSSDK. --maxpackageupdates 100  Include and exclude Include and exclude package names with --include and --exclude. e.g. --include nlog or --exclude aspnet\nExclude specifies that packages that match the pattern will not be applied. Include specifies that only packages that match the pattern can be applied.\nThe patterns are regular expressions. This is not a regular expression tutorial, but it is worth knowing a few common ways to use it:\n By default, it is substring match. e.g. --include NLog will include all package names that contain the text NLog. You can anchor the match with ^ at the start or $ at the end to ensure that the package name starts and/or ends with the specified text. Using both start and end anchors means that it must be an exact match for the whole package name. e.g. i=^NLog$ will include only the package NLog. You can use | as an \u0026ldquo;or\u0026rdquo; to match one of several things. However since on the command line the | has special meaning to pipe command output, you have to escape it.  On the command line on windows you escape the | as ^|. e.g. to exclude updates to framework packages: --exclude (Microsoft^|System^|AspNet). In the bash shell on linux, you instead escape by wrapping the whole argument in single quotes, e.g. --exclude '(Microsoft|System|AspNet)'.   Restricting updates Restrict by version change When I do not want major version changes, only minor or patch version changes.\nnukeeper update --change minor  e.g. An update from version 1.2.3 to version 1.5.0 will be selected even if version 2.0.0 is also available. Semantic versioning calls these three numbers major, minor and patch versions. If semantic versioning is being well-used, then breaking changes only appear in major versions.\nThe default value is major.\nRestrict by package age When I am cautious, only want updates that have been available for 3 weeks or more.\nnukeeper update --age 3w  You can specify minimum update age in weeks (w), days (d) or hours (h), e.g. --age 6w, or --age 12h. The default is 7 days. You can use zero (0) on it\u0026rsquo;s own.\nThis is a precaution against being on the \u0026ldquo;bleeding edge\u0026rdquo; by taking new packages immediately. Sometimes issues are discovered just after package release, and the package is removed or replaced by a x.0.1 fix release.\nWhen I am living on the edge, I will take updates as soon as they are available.\nnukeeper update --age 0  "
},
{
	"uri": "/basics/output-and-logging/",
	"title": "Output and Logging",
	"tags": [],
	"description": "",
	"content": "Text produced by NuKeeper falls into two categories: logging and output. Both can be independently sent to console, or to file, or turned off. Both default to the console.\nOptions related to logging are verbosity, logdestination and logfile. Options related to output are outputformat, outputdestination, and outputfile\nIf the run of NuKeeper is intended to produce Pull Requests, then output and logging is less important. But if the run is intended to inspect local code or remote repositories, the output is the primary result of the run. Logging is important for debugging issues.\nLogging has verbosity so that it can produce more lines or fewer lines. Verbosity is one of Quiet, Minimal, Normal, Detailed.\nOutput has different formats, intended for different consumers, be it human or machine-readable.\n Text is the default format, and is intended to be human readable. None turns it off entirely. No output is produced. Csv produces a report in Comma-Separated Value format, with one line for each package update found. Metrics produces several code metrics, one per line, each with a \u0026ldquo;name: number\u0026rdquo; format. The libyears metric is included. libyears outputs only the libyears number.  We may add to the output formats over time based on what people need.\nFor both logging and output, both destination and file options can be specified on the command-line or in the settings file. The usual fallback applies - values taken are (in order) from command line, from settings file, from the default value.\nIn both cases, destination is an enumeration, one of Console, File or Off. Off makes a null object that does not record the data at all. File appends to the named file.\nIn both cases, if the destination is File and no file name is given, then a default file name is used, nukeeper.log for logging, and nukeeper.out for output. So if you specify --logdestination file on the command-line and nothing else log-related, logging will go to the file nukeeper.log.\nIn both cases, the default destination is Console, unless a file name is given on the command-line, in which case the default is File. So if you specify --outputfile somefile.out on the command-line and nothing else output-related, output will go to the file somefile.out.\n"
},
{
	"uri": "/platform/",
	"title": "Platform",
	"tags": [],
	"description": "",
	"content": " NuKeeper Platform support These are all the supported platforms. Find instruction on how to use NuKeeper with your platform by selecting an item from the menu.\n"
},
{
	"uri": "/commands/repository/",
	"title": "Repository",
	"tags": [],
	"description": "",
	"content": " Use the repository command to raise multiple pull requests against a GitHub repository. The repository does not need to be present on the file system beforehand. It will be fetched to a temporary folder.\nIf you run these command lines regularly, you can automatically get update pull requests like this one and always keep a project\u0026rsquo;s dependencies up to date.\nRaising a pull request is intended to hook into the automated tests and manual review process that you use. You can then choose to merge or reject the pull request based on the outcome.\nIn order to work with repositories, you will first need a personal access token.\nGithub\nnukeeper repo https://github.com/myorg/myrepo token  Azure DevOps\nnukeeper repo https://dev.azure.com/{org}/{project}/_git/{repo}/ token  The minimum scope of access associated for the token to make NuKeeper work is \u0026ldquo;Code (Read \u0026amp; write)\u0026ldquo;.\nWith Arguments I want one Pull Request that applies a top ten updates to my repository\nnukeeper repo url token --maxpackageupdates 10 --consolidate  I want one Pull Request that applies updates to all packages of the AWS SDK:\nnukeeper repo url token --maxpackageupdates 100 --include ^AWSSDK. --consolidate  PR from local repository This is only available for azure devops and vsts\n\r//TODO\nUsing a targetBranch This is only available for azure devops, vsts and github right now\n\rIn some cases you want NuKeeper not to run on the default branch but on a specific (feature-)branch e.g. when you want to keep the feature branches for a certain feature updated and in sync across repositories. The \u0026ndash;targetBranch option makes this possible. It will create pull-requests on a specific branch if updates are required.\nI want one Pull Request that applies updates to all packages to the feature-branch CoolNewFeature:\nnukeeper repo url token --consolidate --tagetBranch CoolNewFeature  Hidden token The token is a secret; often you don\u0026rsquo;t want to put it on the command line, e.g. if this command line is in a script stored in a public repository. In that case, you can put it in the appropriate environment variable blow and NuKeeper will automatically read it from there. NuKeeper_github_token Nukeeper_azure_devops_token\nset NuKeeper_github_token=mygithubtoken  Custom GitHub API server If you have a a different GitHub server, e.g. one hosted inside your organisation, you need to find out where its API root URL is. You can specify it to Nukeeper with e.g. --api=https://github.mycompany.com/api/v3. The default is the public API at https://api.github.com\nThe host must contain the word github to be able to select the right platform.\nOptions for controlling pull requests NuKeeper often operates in a target-rich environment, where you don\u0026rsquo;t want to raise all the potential pull requests at once.\nNuKeeper sorts the pull requests, using heuristics so that more impactful updates are at the top, but you also can control how many pull requests are raised, when and what levels of change.\nExamples --maxpackageupdates 2 Limit to two pull requests generated by a run. The default value is 3.\n--change minor Do not allow major version changes.\n--age 10d Do not apply any version change until it has been available for 10 days. The default is 7 days. You can also specify this value in weeks with e.g. age=6w or hours with e.g. age=12h.\n"
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " NuKeeper Nukeeper is a tool to automagically update NuGet packages in all .NET projects. It has command for local usage and for making PR\u0026rsquo;s to a repository on all kinds of git hosting platforms. It supports .NET framework and .NET Core.\nQuick install Installation is very easy. Just run this command and the tool will be installed.\nInstall:\ndotnet tool install nukeeper --global  Platform support NuKeeper works for .NET Framework and for .NET Core projects. It also has the ability to target private NuGet feeds.\n   .NET Framework .NET Core Private Nuget Feed     ✔️ ✔️ ✔️    Integration with the following platforms is supported.\n   Github AzureDevOps BitBucket GitLab Gitea     ✔️ ✔️ ✔️ ✔️ ✔️    Commands NuKeeper has different commands and options which can be utilized. Below you\u0026rsquo;ll find a summary of all the commands and what they do.\nOptions: --version Show version information -?|-h|--help Show help information Commands: global Performs version checks and generates pull requests for all repositories the provided token can access. inspect Checks projects existing locally for possible updates. org Performs version checks and generates pull requests for all repositories in a github organisation. repo Performs version checks and generates pull requests for a single repository. update Applies relevant updates to a local project.  "
},
{
	"uri": "/platform/azure-devops/",
	"title": "Azure Devops",
	"tags": [],
	"description": "",
	"content": " NuKeeper supports Azure Devops, VSTS and TFS on premise. The same instruction apply for all these platforms!\n\rNuKeeper supports integration with Azure Devops in two ways. One of them is to use the repo command and the other one is through the extension. The benefit of the extension is that you can make a build pipeline with the extension and schedule your pipeline. This way you can automate your updating flow.\nExtension The NuKeeper extension is available in the marketplace. In order to install it you need to add it to your organisation click the Get it free button and follow the installation. Once that is done you can create a new pipeline and use the extension.\nInstallation Azure Devops gives us the option to do it either in editor mode, or in yaml.\nYaml  Add a new build pipeline and select yaml. Add the following yml file and adjust where necessary:\n resources: - repo: self #point to its own repo, change it if you don't want that pool: name: Hosted VS2017 # can be anything you want steps: - task: nukeeper.nukeeper.nukeeper.NuKeeper@0 displayName: NuKeeper   Optionally add extra arguments, The extension just call the repo command, so any arguments extra for your repo command can be added here.  resources: steps: - task: nukeeper.nukeeper.nukeeper.NuKeeper@0 displayName: NuKeeper inputs: arguments: \u0026lsquo;-m 3 -v d\u0026rsquo; \n Go to triggers and click the  Add button to add your schedule. This cannot be done in yml yet.\n Finally give the build service user the required Permissions and take it for a spin by qeueing a new build!\n  Editor mode  Create a new build pipeline for editor mode. Select your repository and select the master branch. Add a new task to your pipeline and select NuKeeper. Optionally, click on the task and add additional arguments to the Arguments field. For help on the arguments checkout the Configuration page. The extension just call the repo command, so any arguments extra for your repo command can be added here. Go to triggers and click the  Add button to add your schedule. Enable your agent to access the oauth token:  Finally give the build service user the required Permissions and take it for a spin by qeueing a new build!\n  Permissions The extensions uses the build service user to make a PR. By default this user is not allowed to do that. We have to give it the permissions to do so:\n Go to \u0026ldquo;Project settings\u0026rdquo; in your AzureDevops home screen. Click repositories Click Git repositories Click the build service User(the bottom one, something like: Project collection build service)  Give it the following rights:\n Contribute Allow Contribute to pull requests Allow Create branch Allow  Repo command The repo command works for azure-devops \u0026amp; vsts they same as for the other platforms. You will need a personal access token to use the repo command.\nnukeeper repo \u0026quot;https://dev.azure.com/{org}/{project}/_git/{repo}/\u0026quot; \u0026lt;PAT\u0026gt;  Additional arguments Add any additional arguments that are available for the repo command\nnukeeper repo \u0026quot;https://dev.azure.com/{org}/{project}/_git/{repo}/\u0026quot; \u0026lt;PAT\u0026gt; -m 10  The -m 10 tells NuKeeper that it may update 10 packages. For more parameters checkout the Configuration page.\n"
},
{
	"uri": "/platform/bitbucket/",
	"title": "Bitbucket",
	"tags": [],
	"description": "",
	"content": " NuKeeper has BitBucket support. This means NuKeeper can create PR\u0026rsquo;s to a single bitbucket repository using the repository command and a app password.\nGetting a app password To get a app password for your account go to bitbucket settings and click App password.\nNuKeeper needs an App password to create a PR on your repository.\n Go to bitbucket settings Select App password Click the Create app password button Give it the following access rights:  Pull request: write(that should also select the other applicable access rights)  Store the token and use that for a NuKeeper repo command  Repo command The repo command has two required arguments. The first one is the repository that you want to target. For BitBucket you can use the same url that you use for cloning. So something like:\nhttps://{username}@bitbucket.org/{username}/{repositoryname}.git  Now to run the command use\nnukeeper repo https://{username}@bitbucket.org/{username}/{repositoryname}.git {AppPassword}  Any additional arguments can be added after the app password, for more information checkout the Configuration page.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/basics/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "   Long name Short name Commands where it applies Default value     help h all    age a all 7d   change c all Major   useprerelease  all FromPrerelease   exclude e all null   include i all null   source s all NuGet.org public api url         verbosity v all Normal   logdestination  all Console   logfile  all \u0026lsquo;nukeeper.log\u0026rsquo;   ouputformat  all Text   ouputdestination  all Console   ouputfile  all \u0026lsquo;nukeeper.out\u0026rsquo;         api g org, global GitHub.com public API Uri   api g repo Depends on repository Uri   fork f repo, org, global PreferFork (Github)  SingleRepository (AzureDevOps)   fork f repo, org, global PreferFork   label l repo, org, global \u0026lsquo;nukeeper\u0026rsquo;   maxpackageupdates m repo, org, global, update 3, or when the command is update, 1   consolidate n repo, org, global false   platform  repo, org, global null         maxrepo  org, global 10   includerepos  org, global null   excluderepos  org, global null     age The minimum package age. In order to not consume packages immediately after they are released, exclude updates that do not meet a minimum age. The default is 7 days. This age is the duration between the published date of the selected package update and now. A value can be expressed in command options as an integer and a unit suffix, where the unit is one of h for hour, d for days, w for weeks. A zero with no unit is also allowed. Examples: 0 = zero, 12h = 12 hours, 3d = 3 days, 2w = two weeks.\n change The greatest level of update that is allowed to packages, based on the version number difference. Values are: Major, Minor, Patch. See Semver for what these mean. The default value Major will allow updates to the overall latest version even if it means accepting a new major version.\n UsePrerelease Should NuKeeper suggest updates to a pre-release (beta) package version. Values are Always, Never, FromPrerelease. The default is FromPrerelease, meaning that only a package that is currently used at a pre-release version will be updated to a later pre-release version.\n  For example, if you are currently using package Foo at version 1.2.3 and these new versions are available: 1.2.4 - a patch version change, 1.3.0 - a minor version change and 2.0.0 - a new major version. * If the allowed version change is Major (the default) you will get an update to the overall latest version, i.e. 2.0.0. * If you set the allowed version change to Minor, you will get an update to 1.3.0 as now changes to the major version number are not allowed. Version 1.2.4 is also allowed, but the largest allowed update is applied. * If the allowed version change is Patch you will only get an update to version 1.2.4.\n exclude Do not consider packages matching this regex pattern. include Only consider packages matching this regex pattern. source Specifies a NuGet package source to use during the operation. This setting overrides all of the sources specified in the NuGet.config files. Multiple sources can be provided by specifying this option multiple times.\n verbosity. Controls how much log data is produced. Values are, from least output to most output: Quiet, Minimal, Normal, Detailed. Quiet should produce no output unless there is an error, and Detailed is suitable for debugging issues. You can also use short names for these log levels: Q, M, N, D.\n logdestination: Where log data is sent: One of: Console, File, Off. Default is Console.\n logfile when set, log data will be appended to the named file instead of going to console.\n outputformat. Format for output. One of: None, Text, Csv, Metrics,Libyears. Default is Text.\n outputdestination: Where output is sent: One of: Console, File, Off. Default is Console.\n outputfile : Name of file to send output to. Used when output destination is File. default is nukeeper.out.\n api This is the api endpoint for the instance you\u0026rsquo;re targeting. If you are using an internal server and not a public one, you must set it to the api url for your server. The value will be e.g. https://github.mycompany.com/api/v3.\n fork Values are PreferFork, PreferSingleRepository and SingleRepositoryOnly. Prefer to make branches on a fork of the target repository, or on that repository itself. See the section \u0026ldquo;Branches, forks and pull requests\u0026rdquo; below.\n label Label to apply to GitHub pull requests. Can be specified multiple times.\n maxpackageupdates The maximum number of package updates to apply. In repo,org and global commands, this limits the number of updates per repository. If the --consolidate flag is used, these wll be consolidated into one Pull Request. If not, then there will be one Pull Request per update applied. In the update command, The default value is 1. When changed, multiple updates can be applied in a single update run, up to this number.\n maxrepo The maximum number of repositories to change. Used in Organisation and Global mode.\n consolidate Consolidate updates into a single pull request, instead of the default of 1 pull request per package update applied.\n platform One of GitHub, AzureDevOps, Bitbucket, BitbucketLocal. Determines which kind of source control api will be used. This is typicaly infered from the api url structure, but since this does not always work, it can be specified here if neccessary.\n includerepos A regex to filter repositories by name. Only consider repositories where the name matches this regex pattern. Used in Organisation and Global mode.\n excluderepos A regex to filter repositories by name. Do not consider repositories where the name matches this regex pattern. Used in Organisation and Global mode.\n  "
},
{
	"uri": "/contributors/",
	"title": "Contributors",
	"tags": [],
	"description": "",
	"content": " \n Thank you so much for making this happen!  \n.ghContributors{\rdisplay:flex;\rflex-flow: wrap;\ralign-content: flex-start\r}\r.ghContributors  div{\rwidth: 50% ;\rdisplay: inline-flex;\rmargin-bottom: 5px;\r}\r.ghContributors  div label{\rpadding-left: 4px ;\r}\r.ghContributors  div span{\rfont-size: x-small;\rpadding-left: 4px ;\r}\r\r\r@AnthonySteele\r523 commits\r\r\r@skolima\r72 commits\r\r\r@cohen990\r71 commits\r\r\r@MarcBruins\r43 commits\r\r\r@NuKeeperBot\r39 commits\r\r\r@shep1987\r22 commits\r\r\r@slang25\r14 commits\r\r\r@MaxMommersteeg\r12 commits\r\r\r@zubivan\r7 commits\r\r\r@Jens-H-Eriksen\r3 commits\r\r\r@Chama-StephanTuinder\r3 commits\r\r\r@ChrisAnn\r2 commits\r\r\r@cswendrowski\r2 commits\r\r\r@sharpSteff\r2 commits\r\r\r@acraven\r1 commits\r\r\r@ankeshdave\r1 commits\r\r\r@OneCyrus\r1 commits\r\r\r@flcdrg\r1 commits\r\r\r@josesimoes\r1 commits\r\r\r@markkemper1\r1 commits\r\r\r@martincostello\r1 commits\r\r\r@LordMike\r1 commits\r\r\r@phatcher\r1 commits\r\r\r@sanderaernouts\r1 commits\r\r\r@area55git\r1 commits\r\r\r@jmiddour\r1 commits\r\r Tooling thanks to  Logos by area55 CommandLine utils by NateMcMaster Git automation by LibGit2Sharp Github client by Octokit licensed under MIT\n Command line parsing by McMaster.Extensions.CommandLineUtils licensed under Apache License Version 2.0 Website theme by Mathieu Cornic  "
},
{
	"uri": "/basics/custom-feeds/",
	"title": "Custom Feeds",
	"tags": [],
	"description": "",
	"content": "If you have a custom or private NuGet feed, it is recommended that you use a NuGet.config file in your repository. It will be used by NuKeeper, and by other tools. You can specify a list of NuGet sources on the command line. e.g.\nnukeeper update --source https://api.nuget.org/v3/index.json --source http://packages.mycompany.com/nugetfeed  If you override this, you can chose to include the global public api.nuget.org feed or not. You may not need to, if your internal feed proxies the nuget.org feed.\nThe order of precedence is: 1) sources on command line 2) NuGet.config file 3) Default public NuGet.org feed\n"
},
{
	"uri": "/platform/gitea/",
	"title": "Gitea",
	"tags": [],
	"description": "",
	"content": " NuKeeper has Gitea support. This means NuKeeper can create PR\u0026rsquo;s to a single gitea repository using the repository command and an access token.\nGetting the Access Token To get token for your account go to gitea user settings (https://yourGiteaUrl/user/settings) and click Applications.\nNuKeeper needs an Access Tokens to create a PR on your repository.\n Go to gitea user settings Select Applications Enter Token Name in Manage Access Tokens Click the Generate Token button Store the token and use that for a NuKeeper repo command  Repo command The repo command has two required arguments. The first one is the repository that you want to target. For Gitea you can use the same url that you use for cloning. So something like:\nhttps://{yourGiteaUrl}/{username}/{repositoryname}.git  Now to run the command use\nnukeeper repo https://{yourGiteaUrl}/{username}/{repositoryname}.git {Token}  Any additional arguments can be added after the app password, for more information checkout the Configuration page.\n"
},
{
	"uri": "/platform/github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": " NuKeeper has extended Github support. This means NuKeeper can create PR\u0026rsquo;s to a single github repository, update all repositories within a whole organization or on an entire Github server. The only requirement is that we have a valid personal access token(PAT).\nGetting a token To get a token for your account go to settings -\u0026gt; developer settings -\u0026gt; personal access token and click Generate new token.\nGo to your github settings Click developer settings Click the personal access token button Give it the following access rights: Repo command: Repo Organisation command and Global command: Admin:org (read) Admin:public_key (read)\n  Store the token and use that for the commands  Repo command The repo command has two required arguments. The first one is the repository that you want to target. For github you can use the same url that you use for cloning. So something like:\nFor your own repositories:\nhttps://github.com/{username}/{repositoryname}.git  For organisation repositories:\nhttps://github.com/{organisation}/{repositoryname}.git  Now to run the command use\nnukeeper repo https://github.com/{username}/{repositoryname}.git {PAT}  Any additional arguments can be added after the app password, for more information checkout the Configuration page.\nOrganisation command Use the organisation command to raise multiple pull requests against multiple GitHub repositories within the same GitHub Organisation.\nnukeeper org myteam mygithubtoken  Global command Use the global command to update a particular package across your entire github server.\nnukeeper global mygithubtoken --include PackageToUpdate --api https://github.mycompany.com/api/v3  "
},
{
	"uri": "/platform/gitlab/",
	"title": "Gitlab",
	"tags": [],
	"description": "",
	"content": " NuKeeper has GitLab support. This means NuKeeper can create PR\u0026rsquo;s to a single GitLab repository using the repository command and an access token.\nGetting the Access Token To get an access token for your user account follow these steps:\n Go to your user profile https://{YOUR_GITLAB_URL}/profile Select Access Tokens https://{YOUR_GITLAB_URL}/profile/personal_access_tokens Create a new Personal Access Token  Assign a name. Select at least the following scopes for the token:  api - Grants complete read/write access to the API, including all groups and projects. read_user - Grants read-only access to the authenticated user\u0026rsquo;s profile through the /user API endpoint, which includes username, public email, and full name. Also grants access to read-only API endpoints under /users. read_repository - Grants read-only access to repositories on private projects using Git-over-HTTP (not using the API).  Click Create personal access token button  Store the token and use that for a NuKeeper repo command.  Repo command The repo command has two required arguments. The first one is the repository that you want to target. For GitLab you can use the same url that you use for cloning. So something like:\nhttps://{YOUR_GITLAB_URL}/{PROJECT_NAME}/{REPOSITORY_NAME}.git  Now to run the command use\nnukeeper repo https://{YOUR_GITLAB_URL}/{PROJECT_NAME}/{REPOSITORY_NAME}.git {Token}  Any additional arguments can be added after the app password, for more information checkout the Configuration page.\n"
},
{
	"uri": "/commands/global/",
	"title": "Global",
	"tags": [],
	"description": "",
	"content": "This command is only available for github\n\rUse the global command to update a particular package across your entire github server.\nnukeeper global mygithubtoken --include PackageToUpdate --api https://github.mycompany.com/api/v3  "
},
{
	"uri": "/commands/organisation/",
	"title": "Organisation",
	"tags": [],
	"description": "",
	"content": "This command is only available for github\n\rUse the organisation command to raise multiple pull requests against multiple GitHub repositories within the same GitHub Organisation.\nnukeeper org myteam mygithubtoken  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]